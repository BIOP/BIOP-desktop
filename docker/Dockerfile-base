# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel-23-07.html 
FROM nvcr.io/nvidia/pytorch:23.07-py3
#FROM nvcr.io/nvidia/pytorch:25.01-py3

USER root

#################################################################
# Install 
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update -y \
    && apt upgrade -y \
    && apt-get install -yq --no-install-recommends \
        dbus-x11 \
        net-tools \
        less \
        xfce4 \
        xfce4-panel \
        xfce4-session \
        xfce4-settings \
        xorg \
        xubuntu-icon-theme \
        gnome-terminal \
        fonts-dejavu \
        git-gui \
        gitk \
        emacs \
        sudo \
        ncdu \
        p7zip-full \    
        wget \
        bzip2 \
        # install jdk (for OMERO.insight)
        openjdk-11-jdk \
    # cleaning up 
    && apt-get autoremove --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && find /var/log -type f -exec cp /dev/null \{\} \;

#################################################################
# Create BIOP user
RUN echo "biop ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/biop
RUN useradd -m biop -G root

#################################################################
# Install the jupyter extensions
RUN pip install jupyter-server-proxy jupyterlab-drawio --no-cache-dir jupyter-archive
RUN apt update \
    && apt install nodejs npm websockify -y \
    && apt-get autoremove --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && find /var/log -type f -exec cp /dev/null \{\} \;
COPY --chown=biop:biop jupyter_notebook_config.py /home/biop/.jupyter/jupyter_notebook_config.py

#################################################################
# Install TigerVNC 1.9.0 -> Test 1.13.1
ENV tigervnc_version=1.10.1
RUN curl -sSfL https://sourceforge.net/projects/tigervnc/files/stable/${tigervnc_version}/tigervnc-${tigervnc_version}.x86_64.tar.gz/download | tar -zxf - -C /usr/local --strip=2

#################################################################
# Install noVNC 1.1.0 -> test 1.4.0
ENV novnc_version=1.1.0
RUN curl -sSfL https://github.com/novnc/noVNC/archive/v${novnc_version}.tar.gz | tar xvz -C /opt/ && \
    chmod a+rX -R /opt/noVNC-${novnc_version}
# Custom interface
COPY --chown=root:root vnc_renku.html /opt/noVNC-${novnc_version}
# Custom ui.js
COPY --chown=root:root ui.js /opt/noVNC-${novnc_version}/app/ui.js
# COPY --chown=root:root renku-48x48.png /opt/noVNC-${novnc_version}/app/images/icons
# COPY --chown=root:root base.css /opt/noVNC-${novnc_version}/app/styles/base.css
# COPY --chown=root:root fonts /opt/noVNC-${novnc_version}/app/styles/fonts

#################################################################
# Install firefox
RUN wget -q 'https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64' -O /tmp/firefox.tar.xz \
    && tar -xJf /tmp/firefox.tar.xz -C /opt/ \
    && rm -rf /tmp/firefox.tar.xz \
    && ln -sf /opt/firefox/firefox /usr/bin/firefox \
    && apt update \
    && apt install libdbus-glib-1-2 -y \
    && apt-get autoremove --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && find /var/log -type f -exec cp /dev/null \{\} \;
ENV BROWSER=firefox


#################################################################
# Replace conda with miniforge
#Put conda in path so we can use conda activate
ENV PATH=$PATH:/opt/conda/bin
RUN wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh \
    && bash Miniforge3-Linux-x86_64.sh -b -p /opt/conda \
    && rm Miniforge3-Linux-x86_64.sh \
    && conda init 

################################################################# 
# Install VScode
RUN wget https://go.microsoft.com/fwlink/?LinkID=760868 -O /tmp/vscode.deb \
    && apt install -y /tmp/vscode.deb \
    && rm /tmp/vscode.deb
#################################################################
# Create shortcut to start jupyter lab
RUN mkdir /opt/jupyter
COPY jupyter/start_jupyter.sh /opt/jupyter/start_jupyter.sh
COPY jupyter/jupyter_.png /opt/jupyter/jupyter.png

RUN chmod +x /opt/jupyter/start_jupyter.sh \
    && chown -R biop:biop /opt/jupyter/ \
    && mkdir -p /home/biop/Desktop && chown -R biop:biop /home/biop/Desktop \
    && printf '[Desktop Entry]\nVersion=3.6.8\nName=jupyter\nGenericName=jupyter\nX-GNOME-FullName=jupyter\nComment=Scientific Image Analysis\nType=Application\nCategories=Education;Science;ImageProcessing;\nExec=/opt/jupyter/start_jupyter.sh\nTryExec=/opt/jupyter/start_jupyter.sh\nTerminal=true\nStartupNotify=true\nIcon=/opt/jupyter/jupyter.png\nStartupWMClass=jupyter\n' > /home/biop/Desktop/jupyter.desktop \
    && chown -R biop:biop /home/biop \
    && chmod -R a+rwx /home/biop/

#################################################################
# Install latest Inkscape stable version
RUN sudo apt-get update -y \
    && sudo apt-get install software-properties-common -y \
    && sudo apt-get update -y \
    && sudo add-apt-repository ppa:inkscape.dev/stable -y \
    && sudo apt-get update -y \
    && sudo apt-get install inkscape -y 

################################################################# 
# Install OMERO.insight standalone
RUN wget -q https://github.com/ome/omero-insight/releases/download/v5.8.6/OMERO.insight-5.8.6.zip \
    && unzip OMERO.insight-5.8.6.zip -d /opt/OMERO.insight \
    && rm OMERO.insight-5.8.6.zip
# to have OMERO EPFL pre-configured
COPY omero-insight/container.xml /opt/OMERO.insight/OMERO.insight-5.8.6/config/container.xml

################################################################# 
# OpenCL for clij ...
RUN apt-get update \
    && apt-get install -y nvidia-opencl-dev \
    && apt remove -y libnvidia-compute-550-server \
    && apt-get autoremove --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && find /var/log -type f -exec cp /dev/null \{\} \;

# # Load preferences for firefox, removing GPU acceleration
# USER biop
# #################################################################
# # Copy custom pref.js into the Firefox profile
# COPY mozilla/prefs.js /home/biop/prefs.js 

# #################################################################
# # Start Firefox once in headless mode to generate profile directory
# RUN firefox --headless --no-remote --setDefaultBrowser & sleep 5 \
#     && pkill firefox \
# #################################################################
# # Find the dynamically created profile folder and copy the custom pref.js into it
#     && PROFILE_DIR=$(find /home/biop/.mozilla/firefox -type d -name "*.default-release") \
#     && mv /home/biop/prefs.js $PROFILE_DIR/prefs.js
# USER root

#################################################################

#################################################################
#################################################################
# Find the dynamically created profile folder and copy the custom pref.js into it
    && PROFILE_DIR=$(find /home/biop/.mozilla/firefox -type d -name "*.default-release") \
    && mv /home/biop/prefs.js $PROFILE_DIR/prefs.js

USER root
#################################################################
RUN chown -R biop:biop /home/biop/ \
    && chmod -R a+rwx /home/biop/ 

#################################################################
# Container start
USER biop
WORKDIR /home/biop
ENTRYPOINT ["/usr/local/bin/jupyter"]
CMD ["lab", "--allow-root", "--ip=*", "--port=8888", "--no-browser", "--NotebookApp.token=''", "--NotebookApp.allow_origin='*'", "--notebook-dir=/home/biop"]